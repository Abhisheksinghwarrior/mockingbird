/*!
 * Mixins
 * Lucas Carl 06/2017
 */

@mixin clearfix() {
	&::before,
	&::after {
		content: '';
		display: table;
	}

	&::after {
		clear: both;
	}
}

@mixin button-variants() {
	@each $mb-color in map-keys($mb-colors) {

		$color: map-get($mb-colors, #{$mb-color});
		$text: map-get($mb-text, #{$mb-color});

		&.mb-#{$mb-color} {
			background-color: $color;
			color: $text;

			&:hover,
			&:focus {
				background-color: darken($color, 5%);
			}

			&.mb-outline {
				background: transparent;
				color: $color;
				border-color: $color;

				&:hover,
				&:focus {
					color: $text;
					background-color: $color;
					border-color: $border-color;
				}
			}
		}

	}
}

@mixin input-variants() {
	@each $mb-color in map-keys($mb-colors) {

		$color: map-get($mb-colors, #{$mb-color});

		&.mb-#{$mb-color} {
			border-color: $color;

			&:focus {
				box-shadow: inset 0 0 2px rgba($color, .75);
			}
		}

		&[disabled],
		&.disabled {
			background-color: map-get($mb-colors, lightest);
			pointer-events: none;
			cursor: not-allowed;
			filter: grayscale(1);
			opacity: .8;
		}

	}
}

@mixin text-variants() {
	@each $mb-color in map-keys($mb-colors) {

		$color: map-get($mb-colors, #{$mb-color});

		.mb-text-#{$mb-color} {
			color: $color !important;

			a {
				color: inherit;
			}
		}

	}
}

@mixin table-variants() {
	@each $mb-color in map-keys($mb-colors) {
		$color: map-get($mb-colors, #{$mb-color});

		&.mb-#{$mb-color} {
			background-color: rgba($color, .25);
		}
	}
}

@mixin label-variants() {
	@each $mb-color in map-keys($mb-colors) {

		$color: map-get($mb-colors, #{$mb-color});
		$text: map-get($mb-text, #{$mb-color});

		&.mb-#{$mb-color} {
			background-color: $color;
			color: $text !important;

			&:hover,
			&:focus {
				background-color: darken($color, 5%);
			}

			&.mb-outline {
				color: $color !important;
				border-color: $color;
			}
		}

	}
}

@mixin card-variants() {
	@each $mb-color in map-keys($mb-colors) {

		$color: map-get($mb-colors, #{$mb-color});

		&.mb-#{$mb-color} {
			border-color: $color;

			&.callout {
				border-color: $border-color $border-color $border-color $color;
			}

			&.mb-outline {
				background: transparent;
			}
		}

	}
}

@mixin make-columns() {
	@for $i from 1 through $grid-columns {

		@each $breakpoint in map-keys($grid-breakpoints) {

			.col-#{$breakpoint}-#{$i} {
				@extend %column;

				@media (min-width: map-get($grid-breakpoints, #{$breakpoint})) {
					width: percentage($i / $grid-columns);
					padding: 0 ($grid-gutter / 2);
				}
			}

		}

		.col-#{$i} {
			@extend %column;

			width: percentage($i / $grid-columns);
			padding: 0 ($grid-gutter / 2);
		}

	}
}

@mixin alert-variants() {
	@each $mb-color in map-keys($mb-colors) {

		$color: map-get($mb-colors, #{$mb-color});
		$text: map-get($mb-text, #{$mb-color});

		&.mb-#{$mb-color} {
			background: rgba($color, .9);
			border-color: $color;
			color: $text;
		}

	}
}
